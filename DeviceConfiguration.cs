// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.4.2.1
// Schema file: DeviceConfiguration.xsd
// Creation Date: 2006-06-06 20:56:04
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections.Generic;
using System.Xml.Schema;
using System.ComponentModel;

namespace Notpod.Configuration12
{

    public class DeviceConfiguration
    {

        [XmlIgnore]
        private ICollection<SyncPattern> syncPatterns = new List<SyncPattern>();

        private ICollection<Device> devices = new List<Device>();

        /// <summary>
        /// Accessor for devices.
        /// </summary>
        public Device[] Devices
        {
            get
            {

                Device[] devicesarr = new Device[devices.Count];
                devices.CopyTo(devicesarr, 0);
                return devicesarr;

            }
            set
            {
                devices.Clear();
                foreach (Device d in value)
                    devices.Add(d);

            }
        }
        
        [XmlIgnore]
        public SyncPattern[] SyncPatterns {
            
            set { }
            get { return new SyncPattern[0]; }
        }
        
        /// <summary>
        /// Add a device.
        /// </summary>
        /// <param name="d">Device to add.</param>
        public void AddDevice(Device d)
        {
            devices.Add(d);
        }

        /// <summary>
        /// Remove a Device.
        /// </summary>
        /// <param name="d">Device to remove.</param>
        /// <returns></returns>
        public bool RemoveDevice(Device d)
        {
            return devices.Remove(d);
        }

        [XmlIgnore]
        public ICollection<SyncPattern> SyncPattern {
         
            get { return syncPatterns; }
            set { syncPatterns = value;}
        }
        
        public bool ContainsSyncPattern(SyncPattern sp) 
        {
            foreach(SyncPattern existingPattern in syncPatterns) {
                
                if(existingPattern.Identifier == sp.Identifier) {
                    
                    return true;
                }
            }
            return false;
        }

    }

}
